#!/usr/bin/env bash
set -e

# PART I check weather softwares installed
command -v bowtie2 >/dev/null 2>&1 || { echo >&2 "scATAC requires bowtie2 but it is not installed. Aborting."; exit 1; }
command -v samtools >/dev/null 2>&1 || { echo >&2 "scATAC requires samtools but it is not installed. Aborting."; exit 1; }
command -v java >/dev/null 2>&1 || { echo >&2 "scATAC requires java but it is not installed. Aborting."; exit 1; }
command -v scATAC_barcode_err_correct >/dev/null 2>&1 || { echo >&2 "scATAC requires scATAC_barcode_err_correct but it is not installed. Aborting."; exit 1; }
command -v scATAC_decell >/dev/null 2>&1 || { echo >&2 "scATAC requires scATAC_decell but it is not installed. Aborting."; exit 1; }
command -v scATAC_rm_cell_with_low_cov >/dev/null 2>&1 || { echo >&2 "scATAC requires scATAC_rm_cell_with_low_cov but it is not installed. Aborting."; exit 1; }
command -v scATAC_debarcode >/dev/null 2>&1 || { echo >&2 "scATAC requires scATAC_debarcode but it is not installed. Aborting."; exit 1; }

# PART II usage info
usage(){
cat << EOF

Program: scATAC (Multiplex single-cell ATAC-seq analysis pipeline by Ren Lab)
Version: 06.10.2016
Contact: Rongxin Fang <r3fang@ucsd.edu>
Ren Lab: http://bioinformatics-renlab.ucsd.edu/rentrac/

usage: ${0##*/} [-h] [-t THREADS] [-f R1] [-r R2] [-b BARCODE_DIR] [-d MAX_BARCODE_MISMATCH] [-p MarkDuplicates.jar] [-n PREFIX] [-g BOWTIE2_GENOME] [-m MIN_READ]  

Example:
scATAC -t 2 -f demo_R1.fastq.gz -r demo_R2.fastq.gz -b ./barcodes -d 2 -p Picard/MarkDuplicates.jar -n demo -g hg19.fa -m 500 

Options:    
	-h, --help                  Show this help message and exit.
	-t  THREADS                 Set threads for Bowtie2 mapping, sorting and duplication removal [1].
	-f  R1                      fastq.gz file that contains forward reads (only .gz allowed).
	-r  R2                      fastq.gz file that contains reverse reads (only .gz allowed).
	-b  BARCODE_DIR             folder that contains r7_ATAC, i7_ATAC, i5_ATAC and r5_ATAC barcode.
	-d  MAX_BARCODE_MISMATCH    max barcode mismatch allowed for barcode error correction [2].
	-p  MARK_DUPLICATE          path to picard MarkDuplicates.jar [MarkDuplicates.jar].
	-n  PREFIX                  prefix of output files.
	-g  BOWTIE2_GENOME          Bowtie2 indexed reference genome.
	-m  MIN_READ                cells with reads less than MIN_READ will be filtered [500].

Note: To use scATAC, you need to first decomplex barcode combination and integrate barcode 
      information as the beginning of the read name in R1 and R2 files. 
      This can be done by command 'scATAC_debarcode': 
      'scATAC_debarcode -a I1.fastq.gz -b I2.fastq.gz -c R1.fastq.gz | gzip - > R1.decomplex.fastq.gz'
      'scATAC_debarcode -a I1.fastq.gz -b I2.fastq.gz -c R2.fastq.gz | gzip - > R2.decomplex.fastq.gz' 
EOF
} 

# PART III default params
THREADS=1
MAX_BARCODE_MISMATCH=2
MIN_READ=500

# PART IV receiving arguments
while getopts ":t:f:r:b:d:p:n:g:m:" opt;
do
	case "$opt" in
		t) THREADS=$OPTARG;;
		f) R1=$OPTARG;;
		r) R2=$OPTARG;;
		b) BARCODE_DIR=$OPTARG;;
		d) MAX_BARCODE_MISMATCH=$OPTARG;;
		p) MARK_DUPLICATE=$OPTARG;;
		n) PREFIX=$OPTARG;;
		g) GENOME=$OPTARG;;
		m) MIN_READ=$OPTARG;;
		\?) usage
			echo "input error"
			exit 1
			;;
	esac
done

if [ $# -lt 10 ] ; then
   usage
   echo "error: too few arguments"
   exit 1
fi

# check if files exist
if [ ! -f $R1 ]; then
	usage
    echo "error: '$R1' not exists.";
	exit 1
fi

if [ ! -f $R2 ]; then
	usage
    echo "error: '$R2' not exists.";
	exit 1
fi

if [ ! -f $MARK_DUPLICATE ]; then
	usage
    echo "error: '$MARK_DUPLICATE' not exists.";
	exit 1
fi

#if [ ! -f $GENOME ]; then
#	usage
#    echo "error: '$GENOME' not exists.";
#	exit 1
#fi

if [ ! -f $BARCODE_DIR/r7_ATAC ]; then
	usage
    echo "error: '$BARCODE_DIR/r7_ATAC' not exists.";
	exit 1
fi

if [ ! -f $BARCODE_DIR/i7_ATAC ]; then
	usage
    echo "error: '$BARCODE_DIR/i7_ATAC' not exists.";
	exit 1
fi

if [ ! -f $BARCODE_DIR/i5_ATAC ]; then
	usage
    echo "error: '$BARCODE_DIR/i5_ATAC' not exists.";
	exit 1
fi

if [ ! -f $BARCODE_DIR/r5_ATAC ]; then
	usage
    echo "error: '$BARCODE_DIR/r5_ATAC' not exists.";
	exit 1
fi

# check if input type
re='^[0-9]+$'
if ! [[ $THREADS =~ $re ]] ; then
   echo "error: '$THREADS' Not a number" >&2;
   exit 1
fi

if ! [[ $MAX_BARCODE_MISMATCH =~ $re ]] ; then
   echo "error: '$MAX_BARCODE_MISMATCH' Not a number" >&2;
   exit 1
fi

if ! [[ $MIN_READ =~ $re ]] ; then
   echo "error: '$MIN_READ' Not a number" >&2;
   exit 1
fi

echo $0 $* 2>&1 | tee $PREFIX.log 
echo 2>&1 | tee -a $PREFIX.log
echo THREADS=$THREADS 2>&1 | tee -a $PREFIX.log
echo R1=$R1 2>&1 | tee -a $PREFIX.log
echo R2=$R2 2>&1 | tee -a $PREFIX.log
echo BARCODE_DIR=$BARCODE_DIR 2>&1 | tee -a $PREFIX.log
echo MAX_BARCODE_MISMATCH=$MAX_BARCODE_MISMATCH 2>&1 | tee -a $PREFIX.log
echo MARK_DUPLICATE=$MARK_DUPLICATE 2>&1 | tee -a $PREFIX.log
echo PREFIX=$PREFIX 2>&1 | tee -a $PREFIX.log
echo GENOME=$GENOME 2>&1 | tee -a $PREFIX.log
echo MIN_READ=$MIN_READ 2>&1 | tee -a $PREFIX.log
echo 2>&1 | tee -a $PREFIX.log

if [ -d $PREFIX\_tmp ]; then
	rm -r $PREFIX\_tmp
fi
mkdir $PREFIX\_tmp

echo " (`date`) Step 1. map using bowtie2 followed by filtering reads with MAPQ < 30 and inproperly mapped pairs;" 2>&1 | tee -a $PREFIX.log
if [ ! -f $PREFIX\_tmp/$PREFIX.umap.bam ]; then
    bowtie2 -p $THREADS -t -X2000 --no-mixed --no-discordant --mm -x $GENOME -1 $R1 -2 $R2 | samtools view -F 1804 -q 30 -bS - > $PREFIX\_tmp/$PREFIX.umap.bam 2> $PREFIX.algn.log
else
    echo "`(date): pre-existed bam file; alignment skipped`" | tee -a $PREFIX.log
fi

echo " (`date`) Step 2. correct barcode error by allowing $MAX_BARCODE_MISMATCH mismatches;" 2>&1 | tee -a $PREFIX.log
samtools view -h $PREFIX\_tmp/$PREFIX.umap.bam \
| scATAC_barcode_err_correct $MAX_BARCODE_MISMATCH $BARCODE_DIR \
| samtools view -bS - > $PREFIX\_tmp/$PREFIX.umap.corrected.bam

echo " (`date`) Step 3. split reads to individual cells based on the barcode combination;" 2>&1 | tee -a $PREFIX.log
samtools sort -n -@ $THREADS -m 1G $PREFIX\_tmp/$PREFIX.umap.corrected.bam -o $PREFIX\_tmp/$PREFIX.umap.corrected.nsorted.bam
if [ -d $PREFIX\_tmp/cells ]; then
	rm -r $PREFIX\_tmp/cells
fi
mkdir $PREFIX\_tmp/cells # create a tmp folder
samtools view -h $PREFIX\_tmp/$PREFIX.umap.corrected.nsorted.bam \
| scATAC_decell $MIN_READ $PREFIX\_tmp/cells -

echo " (`date`) Step 4. remove PCR duplication for each cell;" 2>&1 | tee -a $PREFIX.log
iterator=0
for line in `ls $PREFIX\_tmp/cells | grep .sam`
do
	barcode="${line%.*}"
	samtools view -bS $PREFIX\_tmp/cells/$barcode.sam \
	| samtools sort -@ $THREADS - -o $PREFIX\_tmp/cells/$barcode.sorted.bam
	samtools rmdup $PREFIX\_tmp/cells/$barcode.sorted.bam $PREFIX\_tmp/cells/$barcode.sorted.nodup.bam
    iterator=$((iterator + 1))
    if (( $iterator % $THREADS == 0 ))           # no need for brackets
    then
  	  while kill -0 $! 2>/dev/null
  	  do
  	    sleep 5
  	  done
    fi
done
rm $PREFIX\_tmp/cells/*.sam

echo " (`date`) Step 5. merge reads from different cells to a single file;" 2>&1 | tee -a $PREFIX.log
samtools cat -o $PREFIX\_tmp/$PREFIX.umap.corrected.nsorted.bam $PREFIX\_tmp/cells/*.sorted.bam
samtools cat -o $PREFIX\_tmp/$PREFIX.umap.corrected.nsorted.nodup.bam $PREFIX\_tmp/cells/*.sorted.nodup.bam
#rm -r $PREFIX\_tmp/cells/

echo " (`date`) Step 6. generate barcode frequency;" 2>&1 | tee -a $PREFIX.log
samtools view $PREFIX\_tmp/$PREFIX.umap.corrected.nsorted.nodup.bam \
| awk '{split($1,a,":"); print a[1]}' | sort | uniq -c | awk '{print $2, $1}' \
| sort -k2rn - > $PREFIX\_tmp/$PREFIX.umap.corrected.nsorted.nodup.stat 

echo " (`date`) Step 7. filter cells with low reads less than $MIN_READ reads;" 2>&1 | tee -a $PREFIX.log
samtools view -h $PREFIX\_tmp/$PREFIX.umap.corrected.nsorted.nodup.bam \
| scATAC_rm_cell_with_low_cov $MIN_READ $PREFIX\_tmp/$PREFIX.umap.corrected.nsorted.nodup.stat - \
| samtools view -bS - > $PREFIX\_tmp/$PREFIX.umap.corrected.nsorted.nodup.filtered.bam

echo " (`date`) Step 8. sort by genomic coordinates;" 2>&1 | tee -a $PREFIX.log
samtools sort -@ $THREADS -m 1G $PREFIX\_tmp/$PREFIX.umap.corrected.nsorted.nodup.filtered.bam -o $PREFIX\_tmp/$PREFIX.umap.corrected.nsorted.nodup.filtered.gsorted.bam

echo " (`date`) Step 9. summerize;" 2>&1 | tee -a $PREFIX.log
TOTAL_READS=$(zcat $R1 | wc -l | awk '{print $1}')
UNIQ_READS=$(samtools view $PREFIX\_tmp/$PREFIX.umap.bam | wc -l | awk '{print $1}')
BARCODE_CORRECTED_READS=$(samtools view $PREFIX\_tmp/$PREFIX.umap.corrected.bam | wc -l | awk '{print $1}')
BEFORE_PICARD_READS=$(samtools view $PREFIX\_tmp/$PREFIX.umap.corrected.nsorted.bam | wc -l | awk '{print $1}')
AFTER_PICARD_READS=$(samtools view $PREFIX\_tmp/$PREFIX.umap.corrected.nsorted.nodup.bam | wc -l | awk '{print $1}')
TOTAL_CELLS=$(awk -v cutoff="$MIN_READ" '{if ($2 > cutoff) print }' $PREFIX\_tmp/$PREFIX.umap.corrected.nsorted.nodup.stat | wc -l | awk '{print $1}')
FINAL_READS=$(samtools view $PREFIX\_tmp/$PREFIX.umap.corrected.nsorted.nodup.filtered.gsorted.bam | wc -l | awk '{print $1}')
TOTAL_BARCODE=$(samtools view $PREFIX\_tmp/$PREFIX.umap.corrected.bam | awk '{split($1,a,":"); print a[1]}' | sort | uniq -c | wc -l | awk '{print $1}')

echo " (`date`) Step 10. clean up;" 2>&1 | tee -a $PREFIX.log
echo "================================ Summary ==================================" 2>&1 | tee -a $PREFIX.log
echo "Total number of raw reads: $((TOTAL_READS/4))" 2>&1 | tee -a $PREFIX.log
echo "Uniquely mapped reads (MAPQ>=30): $UNIQ_READS" 2>&1 | tee -a $PREFIX.log
echo "Reads left after barcode correction: $BARCODE_CORRECTED_READS" 2>&1 | tee -a $PREFIX.log
echo "Uniquely barcode combinations: $TOTAL_BARCODE" 2>&1 | tee -a $PREFIX.log
echo "Estimated PCR duplication rate: $(echo "scale=2; ($BEFORE_PICARD_READS - $AFTER_PICARD_READS) / $BEFORE_PICARD_READS * 100"| bc -l)%" 2>&1 | tee -a $PREFIX.log
echo "Total number of reads left: $FINAL_READS" 2>&1 | tee -a $PREFIX.log
echo "Number of cells with more than $MIN_READ reads: $TOTAL_CELLS" 2>&1 | tee -a $PREFIX.log

sort -k2,2n $PREFIX\_tmp/$PREFIX.umap.corrected.nsorted.nodup.stat \
| awk -v cutoff="$MIN_READ" '{if ($2 > cutoff) print $2}' \
| awk '
function max(x){i=0;for(val in x){if(i<=x[val]){i=x[val];}}return i;}
function min(x){i=max(x);for(val in x){if(i>x[val]){i=x[val];}}return i;}
{
     a[x++]=$1
     b[$1]++
}
END{
	print "Min number of reads for selected cells: "min(a) 
    print "Median number of reads for selected cells: "a[int((x-1)/2)] 
    print "Max number of reads for selected cells: "max(a)
}' 2>&1 | tee -a $PREFIX.log
mv $PREFIX\_tmp/$PREFIX.umap.corrected.nsorted.nodup.filtered.gsorted.bam $PREFIX.bam
rm -r $PREFIX\_tmp
